### Manipulating VCF files:

# 1. Describe the format of the file and the data stored
        grep -c "^#" sample.vcf

# 2. What does the header section of the file contain
        grep -c "^#" sample.vcf

# 3. How many samples are in the file = 
        vcf-query -l sample.VCF | wc -l   # 6 samples
        bcftools query -l sample.vcf | wc -l

# 4. How many variants are in the file
        grep -v "^#" sample.vcf | wc -l  # 398246 variants, all lines without #

# 5. How would you extract the chromosome, position, QualByDepth and RMSMappingQuality fields? Save the output to a tab-delimited file.
        bcftools view -O b <sample.vcf> -o <sample.bcf>
        bcftools index sample.bcf 
       
        bcftools query -f '%CHROM\t%POS[\t%QD;%MQ]\n' sample.vcf > output.vcf  # extract

# 6. Extract data that belongs to chromosomes 2,4 and MT
        awk '$1=="2" || $1=="4" || $1=="MT"' sample.vcf > Chr_24MT.vcf

# 7. Print out variants that do not belong to chr20:1-30000000
        grep -v '^##' sample.vcf | awk -F '\t' '($1 != "chr20" || $2 > 30000000) {print $1, $2, $4, $5}' > variants_not_on_chr20_1-30000000.vcf

# 8. Extract variants that belong to SRR13107019
        bcftools query -f '%CHROM\t%POS\t%REF\t%ALT\n' -s SRR13107019 sample.vcf > SRR13107019_variants.txt

# 9. Filter out variants with a QualByDepth above 7
        bcftools filter -i 'QD > 7' sample.vcf > QD_Above7_variants.vcf

# 10. How many contigs are referred to in the file. Check the header section
        grep -c "^##contig" sample.vcf  # 2211 contigs

# 11. Comment on the eighth and ninth columns of the file
        # refer to text file for comments

# 12. Extract data on the read depth of called variants for sample SRR13107018
        bcftools querry -f '%DP\n' -s SRR13107018 sample.vcf > SRR13107018_DP.vcf

# 13. Extract data on the allele frequency of alternate alleles. Combine this data with the
# chromosome and position of the alternate allele
        bcftools query -f '%CHROM\t%POS\t%ALT\t%AF\n' sample.vcf > Allele_freqs_ALT.vcf


### Manipulating SAM files:

# 1. Describe the format of the file and the data stored
        # Refer to text file for description
        grep -v "^@" sample.sam | wc -l   # 36142 sequences.

# 2. What does the header section of the file contain
        # Refer to text file for explanation

# 3. How many samples are in the file
        grep -c "^@RG" sample.sam  # 249 samples
        grep -E '^@RG' sample.sam | awk '{print $2}' | awk -F ':' '{print $2}' | sort | uniq | wc -l
        
# 4. How many alignments are in the file
        samtools view -F 4 sample.sam | wc -l      # 35511 alignments  
        # field 4 is the 1-based mapping position in the SAM file     

# 5. Get summary statistics for the alignments in the file
        samtools flagstat sample.sam > Alignment_stats.txt  # 35511 /36142 reads (98.25%) were aligned/mapped

# 6. Count the number of fields in the file
        awk '{print NF}' sample.sam | sort -nu | tail -1    # 18 fields

# 7. Print all lines in the file that have @SQ and sequence name tag beginning with NT_
        grep "^@SQ.*NT_" sample.sam > AllSQ_NTlines.txt    # 88 lines

# 8. Print all lines in the file that have @RG and LB tag beginning with Solexa
        grep "^@RG.*LB:Solexa" sample.sam > AllRG_LBSolexa_lines.txt  # 146 lines

# 9. Extract primarily aligned sequences and save them in another file
        grep -v "256" sample.sam > Primarily_aligned_reads.sam # flage value for primary alignments set at 0x100 (256).

# 10. Extract alignments that map to chromosomes 1 and 3. Save the output in BAM format
        samtools view -Sb sample.sam > sample.bam
        samtools view -b sample.bam chr1 chr3 > Chromosomes_1_3.bam

# 11. How would you obtain unmapped reads from the file
        samtools view -f4 -b sample.bam > Unmapped_reads.bam

# 12. How many reads are aligned to chromosome 4
        samtools index sample.bam  # first index the bam file to create a .bam.bai index file.
        samtools view -f4 -c sample.bam  # 631 reads align to Chr 4.

# 13. Comment of the second and sixth column of the file
       #Refer to text file for comments

# 14. Extract all optional fields of the file and save them in “optional_fields.txt”
        samtools view -h sample.bam | cut -f 12- | grep -Eo "RG:Z:[^\t]+" > Extracted_optional_fields.txt
